// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Octokit.Client.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Octokit.Client.Repos.Item.Item.Stargazers {
    /// <summary>
    /// Builds and executes requests for operations under \repos\{repos-id}\{Owner-id}\stargazers
    /// </summary>
    public class StargazersRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new StargazersRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StargazersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/repos/{repos%2Did}/{Owner%2Did}/stargazers{?per_page*,page*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new StargazersRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StargazersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/repos/{repos%2Did}/{Owner%2Did}/stargazers{?per_page*,page*}", rawUrl) {
        }
        /// <summary>
        /// Lists the people that have starred the repository.You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
        /// API method documentation <see href="https://docs.github.com/rest/activity/starring#list-stargazers" />
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<StargazersGetResponse?> GetAsStargazersGetResponseAsync(Action<RequestConfiguration<StargazersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<StargazersGetResponse> GetAsStargazersGetResponseAsync(Action<RequestConfiguration<StargazersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"422", ValidationError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<StargazersGetResponse>(requestInfo, StargazersGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists the people that have starred the repository.You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
        /// API method documentation <see href="https://docs.github.com/rest/activity/starring#list-stargazers" />
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsStargazersGetResponse instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<StargazersResponse?> GetAsync(Action<RequestConfiguration<StargazersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<StargazersResponse> GetAsync(Action<RequestConfiguration<StargazersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"422", ValidationError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<StargazersResponse>(requestInfo, StargazersResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists the people that have starred the repository.You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<StargazersRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<StargazersRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public StargazersRequestBuilder WithUrl(string rawUrl) {
            return new StargazersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes simpleUser, stargazer
        /// </summary>
        public class StargazersGetResponse : IComposedTypeWrapper, IParsable {
            /// <summary>Composed type representation for type simpleUser</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser>? SimpleUser { get; set; }
#nullable restore
#else
            public List<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser> SimpleUser { get; set; }
#endif
            /// <summary>Composed type representation for type stargazer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer>? Stargazer { get; set; }
#nullable restore
#else
            public List<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer> Stargazer { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static StargazersGetResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new StargazersGetResponse();
                if(parseNode.GetCollectionOfObjectValues<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser>(Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser.CreateFromDiscriminatorValue)?.ToList() is List<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser> simpleUserValue) {
                    result.SimpleUser = simpleUserValue;
                }
                else if(parseNode.GetCollectionOfObjectValues<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer>(Octokit.Client.Repos.Item.Item.Stargazers.Stargazer.CreateFromDiscriminatorValue)?.ToList() is List<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer> stargazerValue) {
                    result.Stargazer = stargazerValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer) {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(SimpleUser != null) {
                    writer.WriteCollectionOfObjectValues<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser>(null, SimpleUser);
                }
                else if(Stargazer != null) {
                    writer.WriteCollectionOfObjectValues<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer>(null, Stargazer);
                }
            }
        }
        /// <summary>
        /// Lists the people that have starred the repository.You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
        /// </summary>
        public class StargazersRequestBuilderGetQueryParameters {
            /// <summary>Page number of the results to fetch.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>The number of results per page (max 100).</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class StargazersRequestBuilderGetRequestConfiguration : RequestConfiguration<StargazersRequestBuilderGetQueryParameters> {
        }
        /// <summary>
        /// Composed type wrapper for classes simpleUser, stargazer
        /// </summary>
        public class StargazersResponse : IComposedTypeWrapper, IParsable {
            /// <summary>Composed type representation for type simpleUser</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser>? SimpleUser { get; set; }
#nullable restore
#else
            public List<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser> SimpleUser { get; set; }
#endif
            /// <summary>Composed type representation for type stargazer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer>? Stargazer { get; set; }
#nullable restore
#else
            public List<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer> Stargazer { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static StargazersResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new StargazersResponse();
                if(parseNode.GetCollectionOfObjectValues<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser>(Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser.CreateFromDiscriminatorValue)?.ToList() is List<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser> simpleUserValue) {
                    result.SimpleUser = simpleUserValue;
                }
                else if(parseNode.GetCollectionOfObjectValues<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer>(Octokit.Client.Repos.Item.Item.Stargazers.Stargazer.CreateFromDiscriminatorValue)?.ToList() is List<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer> stargazerValue) {
                    result.Stargazer = stargazerValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer) {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(SimpleUser != null) {
                    writer.WriteCollectionOfObjectValues<Octokit.Client.Repos.Item.Item.Stargazers.SimpleUser>(null, SimpleUser);
                }
                else if(Stargazer != null) {
                    writer.WriteCollectionOfObjectValues<Octokit.Client.Repos.Item.Item.Stargazers.Stargazer>(null, Stargazer);
                }
            }
        }
    }
}
