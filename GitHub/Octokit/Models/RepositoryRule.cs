// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Octokit.Client.Models {
    /// <summary>
    /// Composed type wrapper for classes repositoryRuleBranchNamePattern, repositoryRuleCommitAuthorEmailPattern, repositoryRuleCommitMessagePattern, repositoryRuleCommitterEmailPattern, repositoryRuleCreation, repositoryRuleDeletion, repositoryRuleNonFastForward, repositoryRulePullRequest, repositoryRuleRequiredDeployments, repositoryRuleRequiredLinearHistory, repositoryRuleRequiredSignatures, repositoryRuleRequiredStatusChecks, repositoryRuleTagNamePattern, repositoryRuleUpdate, repositoryRuleWorkflows
    /// </summary>
    public class RepositoryRule : IComposedTypeWrapper, IParsable {
        /// <summary>Composed type representation for type repositoryRuleBranchNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern? RepositoryRuleBranchNamePattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern RepositoryRuleBranchNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitAuthorEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleCommitAuthorEmailPattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleCommitAuthorEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitMessagePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleCommitMessagePattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern RepositoryRuleCommitMessagePattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitterEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleCommitterEmailPattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleCommitterEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCreation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCreation? RepositoryRuleCreation { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCreation RepositoryRuleCreation { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleDeletion</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleDeletion? RepositoryRuleDeletion { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleDeletion RepositoryRuleDeletion { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleNonFastForward</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleNonFastForward? RepositoryRuleNonFastForward { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleNonFastForward RepositoryRuleNonFastForward { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRulePullRequest</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRulePullRequest? RepositoryRulePullRequest { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRulePullRequest RepositoryRulePullRequest { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleBranchNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleBranchNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleBranchNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleBranchNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern? RepositoryRuleRepositoryRuleBranchNamePattern2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleBranchNamePattern RepositoryRuleRepositoryRuleBranchNamePattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitAuthorEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitAuthorEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitAuthorEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitAuthorEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern? RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitMessagePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitMessagePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitMessagePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitMessagePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern? RepositoryRuleRepositoryRuleCommitMessagePattern2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitMessagePattern RepositoryRuleRepositoryRuleCommitMessagePattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitterEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitterEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitterEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCommitterEmailPattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern? RepositoryRuleRepositoryRuleCommitterEmailPattern2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCommitterEmailPattern RepositoryRuleRepositoryRuleCommitterEmailPattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCreation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCreation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCreation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleCreation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleCreation? RepositoryRuleRepositoryRuleCreation2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleCreation RepositoryRuleRepositoryRuleCreation2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleDeletion</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleDeletion</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleDeletion</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleDeletion</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleDeletion? RepositoryRuleRepositoryRuleDeletion2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleDeletion RepositoryRuleRepositoryRuleDeletion2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleNonFastForward</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleNonFastForward</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleNonFastForward</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleNonFastForward</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleNonFastForward? RepositoryRuleRepositoryRuleNonFastForward2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleNonFastForward RepositoryRuleRepositoryRuleNonFastForward2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRulePullRequest</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRulePullRequest</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRulePullRequest</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRulePullRequest</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRulePullRequest? RepositoryRuleRepositoryRulePullRequest2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRulePullRequest RepositoryRuleRepositoryRulePullRequest2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredDeployments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredDeployments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredDeployments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredDeployments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRepositoryRuleRequiredDeployments2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments RepositoryRuleRepositoryRuleRequiredDeployments2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredLinearHistory</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredLinearHistory</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredLinearHistory</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredLinearHistory</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRepositoryRuleRequiredLinearHistory2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRepositoryRuleRequiredLinearHistory2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredSignatures</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredSignatures</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredSignatures</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredSignatures</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRepositoryRuleRequiredSignatures2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures RepositoryRuleRepositoryRuleRequiredSignatures2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredStatusChecks</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredStatusChecks</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredStatusChecks</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredStatusChecks</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRepositoryRuleRequiredStatusChecks2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRepositoryRuleRequiredStatusChecks2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleTagNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleTagNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleTagNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleTagNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleTagNamePattern? RepositoryRuleRepositoryRuleTagNamePattern2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleTagNamePattern RepositoryRuleRepositoryRuleTagNamePattern2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleUpdate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleUpdate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleUpdate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleUpdate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleUpdate? RepositoryRuleRepositoryRuleUpdate2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleUpdate RepositoryRuleRepositoryRuleUpdate2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleWorkflows</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleWorkflows</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows0 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows0 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleWorkflows</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows1 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows1 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleWorkflows</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleWorkflows? RepositoryRuleRepositoryRuleWorkflows2 { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleWorkflows RepositoryRuleRepositoryRuleWorkflows2 { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredDeployments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments? RepositoryRuleRequiredDeployments { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredDeployments RepositoryRuleRequiredDeployments { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredLinearHistory</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory? RepositoryRuleRequiredLinearHistory { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredLinearHistory RepositoryRuleRequiredLinearHistory { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredSignatures</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures? RepositoryRuleRequiredSignatures { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredSignatures RepositoryRuleRequiredSignatures { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleRequiredStatusChecks</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks? RepositoryRuleRequiredStatusChecks { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleRequiredStatusChecks RepositoryRuleRequiredStatusChecks { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleTagNamePattern</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleTagNamePattern? RepositoryRuleTagNamePattern { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleTagNamePattern RepositoryRuleTagNamePattern { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleUpdate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleUpdate? RepositoryRuleUpdate { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleUpdate RepositoryRuleUpdate { get; set; }
#endif
        /// <summary>Composed type representation for type repositoryRuleWorkflows</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Octokit.Client.Models.RepositoryRuleWorkflows? RepositoryRuleWorkflows { get; set; }
#nullable restore
#else
        public Octokit.Client.Models.RepositoryRuleWorkflows RepositoryRuleWorkflows { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RepositoryRule CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
            var result = new RepositoryRule();
            if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleBranchNamePattern = new Octokit.Client.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleCommitAuthorEmailPattern = new Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleCommitMessagePattern = new Octokit.Client.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleCommitterEmailPattern = new Octokit.Client.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleCreation = new Octokit.Client.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleDeletion = new Octokit.Client.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleNonFastForward = new Octokit.Client.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRulePullRequest = new Octokit.Client.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleBranchNamePattern = new Octokit.Client.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleBranchNamePattern0 = new Octokit.Client.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleBranchNamePattern1 = new Octokit.Client.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-branch-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleBranchNamePattern2 = new Octokit.Client.Models.RepositoryRuleBranchNamePattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern = new Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 = new Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 = new Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-author-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 = new Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern = new Octokit.Client.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern0 = new Octokit.Client.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern1 = new Octokit.Client.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-commit-message-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitMessagePattern2 = new Octokit.Client.Models.RepositoryRuleCommitMessagePattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern = new Octokit.Client.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern0 = new Octokit.Client.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern1 = new Octokit.Client.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-committer-email-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCommitterEmailPattern2 = new Octokit.Client.Models.RepositoryRuleCommitterEmailPattern();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCreation = new Octokit.Client.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCreation0 = new Octokit.Client.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCreation1 = new Octokit.Client.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-creation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleCreation2 = new Octokit.Client.Models.RepositoryRuleCreation();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleDeletion = new Octokit.Client.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleDeletion0 = new Octokit.Client.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleDeletion1 = new Octokit.Client.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-deletion".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleDeletion2 = new Octokit.Client.Models.RepositoryRuleDeletion();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleNonFastForward = new Octokit.Client.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleNonFastForward0 = new Octokit.Client.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleNonFastForward1 = new Octokit.Client.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-non-fast-forward".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleNonFastForward2 = new Octokit.Client.Models.RepositoryRuleNonFastForward();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRulePullRequest = new Octokit.Client.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRulePullRequest0 = new Octokit.Client.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRulePullRequest1 = new Octokit.Client.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-pull-request".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRulePullRequest2 = new Octokit.Client.Models.RepositoryRulePullRequest();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredDeployments = new Octokit.Client.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredDeployments0 = new Octokit.Client.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredDeployments1 = new Octokit.Client.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredDeployments2 = new Octokit.Client.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory = new Octokit.Client.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory0 = new Octokit.Client.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory1 = new Octokit.Client.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredLinearHistory2 = new Octokit.Client.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredSignatures = new Octokit.Client.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredSignatures0 = new Octokit.Client.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredSignatures1 = new Octokit.Client.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredSignatures2 = new Octokit.Client.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks = new Octokit.Client.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks0 = new Octokit.Client.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks1 = new Octokit.Client.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleRequiredStatusChecks2 = new Octokit.Client.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleTagNamePattern = new Octokit.Client.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleTagNamePattern0 = new Octokit.Client.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleTagNamePattern1 = new Octokit.Client.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleTagNamePattern2 = new Octokit.Client.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleUpdate = new Octokit.Client.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleUpdate0 = new Octokit.Client.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleUpdate1 = new Octokit.Client.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleUpdate2 = new Octokit.Client.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleWorkflows = new Octokit.Client.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleWorkflows0 = new Octokit.Client.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleWorkflows1 = new Octokit.Client.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRepositoryRuleWorkflows2 = new Octokit.Client.Models.RepositoryRuleWorkflows();
            }
            else if("repository-rule-required-deployments".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRequiredDeployments = new Octokit.Client.Models.RepositoryRuleRequiredDeployments();
            }
            else if("repository-rule-required-linear-history".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRequiredLinearHistory = new Octokit.Client.Models.RepositoryRuleRequiredLinearHistory();
            }
            else if("repository-rule-required-signatures".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRequiredSignatures = new Octokit.Client.Models.RepositoryRuleRequiredSignatures();
            }
            else if("repository-rule-required-status-checks".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleRequiredStatusChecks = new Octokit.Client.Models.RepositoryRuleRequiredStatusChecks();
            }
            else if("repository-rule-tag-name-pattern".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleTagNamePattern = new Octokit.Client.Models.RepositoryRuleTagNamePattern();
            }
            else if("repository-rule-update".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleUpdate = new Octokit.Client.Models.RepositoryRuleUpdate();
            }
            else if("repository-rule-workflows".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.RepositoryRuleWorkflows = new Octokit.Client.Models.RepositoryRuleWorkflows();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            if(RepositoryRuleBranchNamePattern != null) {
                return RepositoryRuleBranchNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCommitAuthorEmailPattern != null) {
                return RepositoryRuleCommitAuthorEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCommitMessagePattern != null) {
                return RepositoryRuleCommitMessagePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCommitterEmailPattern != null) {
                return RepositoryRuleCommitterEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleCreation != null) {
                return RepositoryRuleCreation.GetFieldDeserializers();
            }
            else if(RepositoryRuleDeletion != null) {
                return RepositoryRuleDeletion.GetFieldDeserializers();
            }
            else if(RepositoryRuleNonFastForward != null) {
                return RepositoryRuleNonFastForward.GetFieldDeserializers();
            }
            else if(RepositoryRulePullRequest != null) {
                return RepositoryRulePullRequest.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern != null) {
                return RepositoryRuleRepositoryRuleBranchNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern0 != null) {
                return RepositoryRuleRepositoryRuleBranchNamePattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern1 != null) {
                return RepositoryRuleRepositoryRuleBranchNamePattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern2 != null) {
                return RepositoryRuleRepositoryRuleBranchNamePattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern != null) {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 != null) {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 != null) {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 != null) {
                return RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern != null) {
                return RepositoryRuleRepositoryRuleCommitMessagePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern0 != null) {
                return RepositoryRuleRepositoryRuleCommitMessagePattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern1 != null) {
                return RepositoryRuleRepositoryRuleCommitMessagePattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern2 != null) {
                return RepositoryRuleRepositoryRuleCommitMessagePattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern != null) {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern0 != null) {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern1 != null) {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern2 != null) {
                return RepositoryRuleRepositoryRuleCommitterEmailPattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation != null) {
                return RepositoryRuleRepositoryRuleCreation.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation0 != null) {
                return RepositoryRuleRepositoryRuleCreation0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation1 != null) {
                return RepositoryRuleRepositoryRuleCreation1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleCreation2 != null) {
                return RepositoryRuleRepositoryRuleCreation2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion != null) {
                return RepositoryRuleRepositoryRuleDeletion.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion0 != null) {
                return RepositoryRuleRepositoryRuleDeletion0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion1 != null) {
                return RepositoryRuleRepositoryRuleDeletion1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleDeletion2 != null) {
                return RepositoryRuleRepositoryRuleDeletion2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward != null) {
                return RepositoryRuleRepositoryRuleNonFastForward.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward0 != null) {
                return RepositoryRuleRepositoryRuleNonFastForward0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward1 != null) {
                return RepositoryRuleRepositoryRuleNonFastForward1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward2 != null) {
                return RepositoryRuleRepositoryRuleNonFastForward2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest != null) {
                return RepositoryRuleRepositoryRulePullRequest.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest0 != null) {
                return RepositoryRuleRepositoryRulePullRequest0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest1 != null) {
                return RepositoryRuleRepositoryRulePullRequest1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRulePullRequest2 != null) {
                return RepositoryRuleRepositoryRulePullRequest2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments != null) {
                return RepositoryRuleRepositoryRuleRequiredDeployments.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments0 != null) {
                return RepositoryRuleRepositoryRuleRequiredDeployments0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments1 != null) {
                return RepositoryRuleRepositoryRuleRequiredDeployments1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments2 != null) {
                return RepositoryRuleRepositoryRuleRequiredDeployments2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory != null) {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory0 != null) {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory1 != null) {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory2 != null) {
                return RepositoryRuleRepositoryRuleRequiredLinearHistory2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures != null) {
                return RepositoryRuleRepositoryRuleRequiredSignatures.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures0 != null) {
                return RepositoryRuleRepositoryRuleRequiredSignatures0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures1 != null) {
                return RepositoryRuleRepositoryRuleRequiredSignatures1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures2 != null) {
                return RepositoryRuleRepositoryRuleRequiredSignatures2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks != null) {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks0 != null) {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks1 != null) {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks2 != null) {
                return RepositoryRuleRepositoryRuleRequiredStatusChecks2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern != null) {
                return RepositoryRuleRepositoryRuleTagNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern0 != null) {
                return RepositoryRuleRepositoryRuleTagNamePattern0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern1 != null) {
                return RepositoryRuleRepositoryRuleTagNamePattern1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern2 != null) {
                return RepositoryRuleRepositoryRuleTagNamePattern2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate != null) {
                return RepositoryRuleRepositoryRuleUpdate.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate0 != null) {
                return RepositoryRuleRepositoryRuleUpdate0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate1 != null) {
                return RepositoryRuleRepositoryRuleUpdate1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleUpdate2 != null) {
                return RepositoryRuleRepositoryRuleUpdate2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows != null) {
                return RepositoryRuleRepositoryRuleWorkflows.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows0 != null) {
                return RepositoryRuleRepositoryRuleWorkflows0.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows1 != null) {
                return RepositoryRuleRepositoryRuleWorkflows1.GetFieldDeserializers();
            }
            else if(RepositoryRuleRepositoryRuleWorkflows2 != null) {
                return RepositoryRuleRepositoryRuleWorkflows2.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredDeployments != null) {
                return RepositoryRuleRequiredDeployments.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredLinearHistory != null) {
                return RepositoryRuleRequiredLinearHistory.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredSignatures != null) {
                return RepositoryRuleRequiredSignatures.GetFieldDeserializers();
            }
            else if(RepositoryRuleRequiredStatusChecks != null) {
                return RepositoryRuleRequiredStatusChecks.GetFieldDeserializers();
            }
            else if(RepositoryRuleTagNamePattern != null) {
                return RepositoryRuleTagNamePattern.GetFieldDeserializers();
            }
            else if(RepositoryRuleUpdate != null) {
                return RepositoryRuleUpdate.GetFieldDeserializers();
            }
            else if(RepositoryRuleWorkflows != null) {
                return RepositoryRuleWorkflows.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(RepositoryRuleBranchNamePattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleBranchNamePattern);
            }
            else if(RepositoryRuleCommitAuthorEmailPattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleCommitAuthorEmailPattern);
            }
            else if(RepositoryRuleCommitMessagePattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleCommitMessagePattern);
            }
            else if(RepositoryRuleCommitterEmailPattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleCommitterEmailPattern);
            }
            else if(RepositoryRuleCreation != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCreation>(null, RepositoryRuleCreation);
            }
            else if(RepositoryRuleDeletion != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleDeletion>(null, RepositoryRuleDeletion);
            }
            else if(RepositoryRuleNonFastForward != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleNonFastForward);
            }
            else if(RepositoryRulePullRequest != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRulePullRequest>(null, RepositoryRulePullRequest);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern0);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern1);
            }
            else if(RepositoryRuleRepositoryRuleBranchNamePattern2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleBranchNamePattern>(null, RepositoryRuleRepositoryRuleBranchNamePattern2);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern0);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern1);
            }
            else if(RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitAuthorEmailPattern>(null, RepositoryRuleRepositoryRuleCommitAuthorEmailPattern2);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern0);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern1);
            }
            else if(RepositoryRuleRepositoryRuleCommitMessagePattern2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitMessagePattern>(null, RepositoryRuleRepositoryRuleCommitMessagePattern2);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern0);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern1);
            }
            else if(RepositoryRuleRepositoryRuleCommitterEmailPattern2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCommitterEmailPattern>(null, RepositoryRuleRepositoryRuleCommitterEmailPattern2);
            }
            else if(RepositoryRuleRepositoryRuleCreation != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation);
            }
            else if(RepositoryRuleRepositoryRuleCreation0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation0);
            }
            else if(RepositoryRuleRepositoryRuleCreation1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation1);
            }
            else if(RepositoryRuleRepositoryRuleCreation2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleCreation>(null, RepositoryRuleRepositoryRuleCreation2);
            }
            else if(RepositoryRuleRepositoryRuleDeletion != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion);
            }
            else if(RepositoryRuleRepositoryRuleDeletion0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion0);
            }
            else if(RepositoryRuleRepositoryRuleDeletion1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion1);
            }
            else if(RepositoryRuleRepositoryRuleDeletion2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleDeletion>(null, RepositoryRuleRepositoryRuleDeletion2);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward0);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward1);
            }
            else if(RepositoryRuleRepositoryRuleNonFastForward2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleNonFastForward>(null, RepositoryRuleRepositoryRuleNonFastForward2);
            }
            else if(RepositoryRuleRepositoryRulePullRequest != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest);
            }
            else if(RepositoryRuleRepositoryRulePullRequest0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest0);
            }
            else if(RepositoryRuleRepositoryRulePullRequest1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest1);
            }
            else if(RepositoryRuleRepositoryRulePullRequest2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRulePullRequest>(null, RepositoryRuleRepositoryRulePullRequest2);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments0);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments1);
            }
            else if(RepositoryRuleRepositoryRuleRequiredDeployments2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRepositoryRuleRequiredDeployments2);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory0);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory1);
            }
            else if(RepositoryRuleRepositoryRuleRequiredLinearHistory2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRepositoryRuleRequiredLinearHistory2);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures0);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures1);
            }
            else if(RepositoryRuleRepositoryRuleRequiredSignatures2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRepositoryRuleRequiredSignatures2);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks0);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks1);
            }
            else if(RepositoryRuleRepositoryRuleRequiredStatusChecks2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRepositoryRuleRequiredStatusChecks2);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern0);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern1);
            }
            else if(RepositoryRuleRepositoryRuleTagNamePattern2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleRepositoryRuleTagNamePattern2);
            }
            else if(RepositoryRuleRepositoryRuleUpdate != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate);
            }
            else if(RepositoryRuleRepositoryRuleUpdate0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate0);
            }
            else if(RepositoryRuleRepositoryRuleUpdate1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate1);
            }
            else if(RepositoryRuleRepositoryRuleUpdate2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleUpdate>(null, RepositoryRuleRepositoryRuleUpdate2);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows0 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows0);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows1 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows1);
            }
            else if(RepositoryRuleRepositoryRuleWorkflows2 != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleWorkflows>(null, RepositoryRuleRepositoryRuleWorkflows2);
            }
            else if(RepositoryRuleRequiredDeployments != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredDeployments>(null, RepositoryRuleRequiredDeployments);
            }
            else if(RepositoryRuleRequiredLinearHistory != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredLinearHistory>(null, RepositoryRuleRequiredLinearHistory);
            }
            else if(RepositoryRuleRequiredSignatures != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredSignatures>(null, RepositoryRuleRequiredSignatures);
            }
            else if(RepositoryRuleRequiredStatusChecks != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleRequiredStatusChecks>(null, RepositoryRuleRequiredStatusChecks);
            }
            else if(RepositoryRuleTagNamePattern != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleTagNamePattern>(null, RepositoryRuleTagNamePattern);
            }
            else if(RepositoryRuleUpdate != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleUpdate>(null, RepositoryRuleUpdate);
            }
            else if(RepositoryRuleWorkflows != null) {
                writer.WriteObjectValue<Octokit.Client.Models.RepositoryRuleWorkflows>(null, RepositoryRuleWorkflows);
            }
        }
    }
}
