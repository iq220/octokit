// <auto-generated/>
using GitHub.Octokit.Advisories;
using GitHub.Octokit.App;
using GitHub.Octokit.AppManifests;
using GitHub.Octokit.Applications;
using GitHub.Octokit.Apps;
using GitHub.Octokit.Assignments;
using GitHub.Octokit.Classrooms;
using GitHub.Octokit.Codes_of_conduct;
using GitHub.Octokit.Emojis;
using GitHub.Octokit.Enterprises;
using GitHub.Octokit.Events;
using GitHub.Octokit.Feeds;
using GitHub.Octokit.Gists;
using GitHub.Octokit.Gitignore;
using GitHub.Octokit.Installation;
using GitHub.Octokit.Issues;
using GitHub.Octokit.Licenses;
using GitHub.Octokit.Markdown;
using GitHub.Octokit.Marketplace_listing;
using GitHub.Octokit.Meta;
using GitHub.Octokit.Models;
using GitHub.Octokit.Networks;
using GitHub.Octokit.Notifications;
using GitHub.Octokit.Octocat;
using GitHub.Octokit.Organizations;
using GitHub.Octokit.Orgs;
using GitHub.Octokit.Projects;
using GitHub.Octokit.Rate_limit;
using GitHub.Octokit.Repos;
using GitHub.Octokit.Repositories;
using GitHub.Octokit.Search;
using GitHub.Octokit.Teams;
using GitHub.Octokit.User;
using GitHub.Octokit.Users;
using GitHub.Octokit.Versions;
using GitHub.Octokit.Zen;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace GitHub.Octokit {
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class OctokitClient : BaseRequestBuilder {
        /// <summary>The advisories property</summary>
        public AdvisoriesRequestBuilder Advisories { get =>
            new AdvisoriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The app property</summary>
        public AppRequestBuilder App { get =>
            new AppRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The applications property</summary>
        public ApplicationsRequestBuilder Applications { get =>
            new ApplicationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The appManifests property</summary>
        public AppManifestsRequestBuilder AppManifests { get =>
            new AppManifestsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The apps property</summary>
        public AppsRequestBuilder Apps { get =>
            new AppsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The assignments property</summary>
        public AssignmentsRequestBuilder Assignments { get =>
            new AssignmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The classrooms property</summary>
        public ClassroomsRequestBuilder Classrooms { get =>
            new ClassroomsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The codes_of_conduct property</summary>
        public Codes_of_conductRequestBuilder Codes_of_conduct { get =>
            new Codes_of_conductRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The emojis property</summary>
        public EmojisRequestBuilder Emojis { get =>
            new EmojisRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The enterprises property</summary>
        public EnterprisesRequestBuilder Enterprises { get =>
            new EnterprisesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The events property</summary>
        public EventsRequestBuilder Events { get =>
            new EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The feeds property</summary>
        public FeedsRequestBuilder Feeds { get =>
            new FeedsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The gists property</summary>
        public GistsRequestBuilder Gists { get =>
            new GistsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The gitignore property</summary>
        public GitignoreRequestBuilder Gitignore { get =>
            new GitignoreRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The installation property</summary>
        public InstallationRequestBuilder Installation { get =>
            new InstallationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issues property</summary>
        public IssuesRequestBuilder Issues { get =>
            new IssuesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The licenses property</summary>
        public LicensesRequestBuilder Licenses { get =>
            new LicensesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The markdown property</summary>
        public MarkdownRequestBuilder Markdown { get =>
            new MarkdownRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The marketplace_listing property</summary>
        public Marketplace_listingRequestBuilder Marketplace_listing { get =>
            new Marketplace_listingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The meta property</summary>
        public MetaRequestBuilder Meta { get =>
            new MetaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The networks property</summary>
        public NetworksRequestBuilder Networks { get =>
            new NetworksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The notifications property</summary>
        public NotificationsRequestBuilder Notifications { get =>
            new NotificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The octocat property</summary>
        public OctocatRequestBuilder Octocat { get =>
            new OctocatRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The organizations property</summary>
        public OrganizationsRequestBuilder Organizations { get =>
            new OrganizationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The orgs property</summary>
        public OrgsRequestBuilder Orgs { get =>
            new OrgsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The projects property</summary>
        public ProjectsRequestBuilder Projects { get =>
            new ProjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rate_limit property</summary>
        public Rate_limitRequestBuilder Rate_limit { get =>
            new Rate_limitRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The repos property</summary>
        public ReposRequestBuilder Repos { get =>
            new ReposRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The repositories property</summary>
        public RepositoriesRequestBuilder Repositories { get =>
            new RepositoriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public SearchRequestBuilder Search { get =>
            new SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The teams property</summary>
        public TeamsRequestBuilder Teams { get =>
            new TeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The user property</summary>
        public UserRequestBuilder User { get =>
            new UserRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public UsersRequestBuilder Users { get =>
            new UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The versions property</summary>
        public VersionsRequestBuilder Versions { get =>
            new VersionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The zen property</summary>
        public ZenRequestBuilder Zen { get =>
            new ZenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new OctokitClient and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OctokitClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>()) {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl)) {
                RequestAdapter.BaseUrl = "https://api.github.com";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
        /// <summary>
        /// Get Hypermedia links to resources accessible in GitHub&apos;s REST API
        /// API method documentation <see href="https://docs.github.com/rest/meta/meta#github-api-root" />
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Root?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<Root> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<Root>(requestInfo, Root.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get Hypermedia links to resources accessible in GitHub&apos;s REST API
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class OctokitClientGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
    }
}
